#!/usr/bin/env python
# Copyright (c) 2015, Rethink Robotics, Inc.

# Using this CvBridge Tutorial for converting
# ROS images to OpenCV2 images
# http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython

# Using this OpenCV2 tutorial for saving Images:
# http://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_gui/py_image_display/py_image_display.html

# rospy for the subscriber
import rospy
# ROS Image message
from sensor_msgs.msg import Image
from std_msgs.msg import Int8
# ROS Image message -> OpenCV2 image converter
from cv_bridge import CvBridge, CvBridgeError
# OpenCV2 for saving an image
import cv2
import argparse
import threading, time, os, sys
import message_filters
import numpy as np

# key = "q"
#
# def getch():   # define non-Windows version
#     import sys, tty, termios
#     fd = sys.stdin.fileno()
#     old_settings = termios.tcgetattr(fd)
#     try:
#         tty.setraw(sys.stdin.fileno())
#         ch = sys.stdin.read(1)
#     finally:
#         termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
#     return ch

def parse_args():
    """
    Parse input arguments
    """
    parser = argparse.ArgumentParser(description='Test a Fast R-CNN network')
    parser.add_argument('--depth_path', dest='depth_path', help='depth_path',
                        default=None, type=str)
    parser.add_argument('--rgb_path', dest='rgb_path',
                        help='rgb_path',
                        default=None, type=str)

    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()
    return args

# Instantiate CvBridge
cv_bridge = CvBridge()
args = parse_args()


# def thread1():
#     global key
#     lock = threading.Lock()
#     while True:
#         with lock:
#             key = getch()
#             if key == "q":
#                 sys.exit(1)

def callback(rgb, depth):
    # print "test"
    # global key
    if depth.encoding == '32FC1':
        depth_32 = cv_bridge.imgmsg_to_cv2(depth) * 1000
        depth_cv = np.array(depth_32, dtype=np.uint16)
    elif depth.encoding == '16UC1':
        depth_cv = cv_bridge.imgmsg_to_cv2(depth)
    else:
        rospy.logerr_throttle(
            1, 'Unsupported depth type. Expected 16UC1 or 32FC1, got {}'.format(
                depth.encoding))
        return

    # write images
    # print key
    # if key == "w":
    im = cv_bridge.imgmsg_to_cv2(rgb, 'bgr8')
    filename = args.rgb_path
    cv2.imwrite(filename, im)

    filename = args.depth_path
    cv2.imwrite(filename, depth_cv)

def main():


    print('Called with args:')
    print(args)

    # rospy.init_node('image_listener')
    rospy.init_node("image_taker")
    image_topic = "/camera/rgb/image_color"
    rgb_sub = message_filters.Subscriber(image_topic, Image, queue_size=2)
    # image_topic = "/camera/depth_registered/sw_registered/image_rect_raw"
    image_topic = "/camera/depth_registered/image"
    depth_sub = message_filters.Subscriber(image_topic, Image, queue_size=2)
    # keypress_sub = message_filters.Subscriber("/key", Int8, queue_size=2)

    queue_size = 1
    slop_seconds = 0.025
    ts = message_filters.ApproximateTimeSynchronizer([rgb_sub, depth_sub], queue_size, slop_seconds, allow_headerless=True)
    ts.registerCallback(callback)
    # Spin until ctrl + c
    # while True:
    #     key = ord(getch())
    #     if key == 119: # W
    #         print "trying to take photo"


    try:
        # plt.ion()
        # plt.show()
        # threading.Thread(target = thread1).start()
        rospy.spin()
    except KeyboardInterrupt:
        print "Shutting down"

if __name__ == '__main__':
    main()
